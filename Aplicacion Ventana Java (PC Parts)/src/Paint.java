/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ruflas
 */
public class Paint extends javax.swing.JFrame {

    /**
     * Creates new form PruCanvas
     */
    public Paint() {

        initComponents();
        this.setSize(400, 200);
        this.setIconImage(new ImageIcon("src/images/logo.png").getImage());
        paintPanel = (PaintPanel) PPaint;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BGHerramientas = new javax.swing.ButtonGroup();
        PPaint = new PaintPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MIGuardar = new javax.swing.JMenuItem();
        MIAbrir = new javax.swing.JMenuItem();
        MIColor = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        RBPincel = new javax.swing.JRadioButtonMenuItem();
        RBGoma = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear");
        setMinimumSize(new java.awt.Dimension(40, 14));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        PPaint.setBackground(new java.awt.Color(255, 255, 255));
        PPaint.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                PPaintMouseDragged(evt);
            }
        });
        PPaint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PPaintMouseClicked(evt);
            }
        });
        PPaint.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(PPaint);

        jMenu1.setText("Opciones");

        MIGuardar.setText("Guardar");
        MIGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(MIGuardar);

        MIAbrir.setText("Abrir");
        MIAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(MIAbrir);

        MIColor.setText("Color...");
        MIColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIColorActionPerformed(evt);
            }
        });
        jMenu1.add(MIColor);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Herramientas");

        BGHerramientas.add(RBPincel);
        RBPincel.setSelected(true);
        RBPincel.setText("Pincel");
        jMenu2.add(RBPincel);

        BGHerramientas.add(RBGoma);
        RBGoma.setText("Goma");
        jMenu2.add(RBGoma);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MIColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(null, null, paintPanel.getColor());
        if (c != null) {
            paintPanel.setColor(c);
            paintPanel.repaint();
        }
    }//GEN-LAST:event_MIColorActionPerformed

    private void PPaintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PPaintMouseClicked
        // TODO add your handling code here:
        if (this.RBPincel.isSelected()) {
            // Crear un nuevo círculo en la posición actual del ratón
            Shape circle = new Ellipse2D.Double(evt.getX() - 10, evt.getY() - 10, 20, 20);
            // Agregar el círculo a la lista de formas
            paintPanel.shapes.add(circle);
            // Repintar el panel de dibujo para mostrar las formas
            repaint();

        } else {
            paintPanel.removeComponent(evt.getX(), evt.getY());
            repaint();
        }
    }//GEN-LAST:event_PPaintMouseClicked

    private void PPaintMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PPaintMouseDragged
        // TODO add your handling code here:
        if (this.RBPincel.isSelected()) {
            // Crear un nuevo círculo en la posición actual del ratón
            Shape circle = new Ellipse2D.Double(evt.getX() - 10, evt.getY() - 10, 20, 20);
            // Agregar el círculo a la lista de formas
            paintPanel.shapes.add(circle);
            // Repintar el panel de dibujo para mostrar las formas
            repaint();
        } else {
            paintPanel.removeComponent(evt.getX(), evt.getY());
            repaint();
        }
    }//GEN-LAST:event_PPaintMouseDragged

    private void MIGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIGuardarActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar imagen");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Imagen JPG", "jpg"));
        int seleccion = fileChooser.showSaveDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            // Obtener una instancia de BufferedImage que representa el panel que deseas guardar
            BufferedImage image = new BufferedImage(paintPanel.getWidth(), paintPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g = image.createGraphics();
            paintPanel.paint(g);
            g.dispose();
            // Usar la clase ImageIO para guardar la imagen en formato JPG en la ubicación y con el nombre elegidos por el usuario
            try {
                ImageIO.write(image, "jpg", fileChooser.getSelectedFile());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_MIGuardarActionPerformed

    private void MIAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de imagen", "jpg", "png", "bmp", "gif"));
        int resultado = fileChooser.showOpenDialog(null);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            try {
                // Carga la imagen seleccionada en el paintPanel
                File archivoImagen = fileChooser.getSelectedFile();
                Image imagen = ImageIO.read(archivoImagen);
                int anchoPanel = paintPanel.getWidth();
                int altoPanel = paintPanel.getHeight();
                Image imagenEscalada = imagen.getScaledInstance(anchoPanel, altoPanel, Image.SCALE_SMOOTH);
                JLabel etiquetaImagen = new JLabel(new ImageIcon(imagenEscalada));
                System.out.println("Tamaño de la imagen cargada: " + imagen.getWidth(null) + " x " + imagen.getHeight(null));
                etiquetaImagen.setIcon(null);
                etiquetaImagen.setText(null);
                etiquetaImagen.setIcon(new ImageIcon(imagen));
                paintPanel.add(etiquetaImagen);
                paintPanel.revalidate();
                paintPanel.repaint();

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al cargar la imagen", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_MIAbrirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paint().setVisible(true);
            }
        });
    }

    private PaintPanel paintPanel; // Referencia al mismo objeto que PPaint
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BGHerramientas;
    private javax.swing.JMenuItem MIAbrir;
    private javax.swing.JMenuItem MIColor;
    private javax.swing.JMenuItem MIGuardar;
    private javax.swing.JPanel PPaint;
    private javax.swing.JRadioButtonMenuItem RBGoma;
    private javax.swing.JRadioButtonMenuItem RBPincel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
